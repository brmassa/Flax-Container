image: docker:latest

services:
  - docker:dind

before_script:
  - apk add python3

build-linux:
  stage: build
  allow_failure:
      exit_codes: 2
  script:
    - python3 download.py
    - source _env
    - | 
      if [[ ! -d "app" ]]; then
        echo "app folder does not exist. Job failed."
        exit 2  # Exit with success code 2 to indicate non-failure
      fi
    - |
      docker build \
      -t $CI_REGISTRY_IMAGE:${OS_PLATFORM}-$FLAX_VERSION_FULL \
      -t $CI_REGISTRY_IMAGE:${OS_PLATFORM}-$(eval echo ${FLAX_VERSION//_/.}) \
      -t $CI_REGISTRY_IMAGE:${OS_PLATFORM}-latest \
      --build-arg OS=$OS \
      --build-arg ENGINE_URL=$ENGINE_URL \
      --build-arg OS_PLATFORM_URL=$OS_PLATFORM_URL .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE --all-tags
  parallel:
    matrix:
      - OS_PLATFORM: [
          linux_amd64,
          # windows_amd64,
          # android_arm64,
          # xboxone,
          # windows_store,
        ]

# build-windows:
#   tags:
#     - shared-windows
#     - windows
#     - windows-1809
#   stage: build
#   script:
#     - |
#       docker build \
#       -t $CI_REGISTRY_IMAGE:${OS_PLATFORM}-$FLAX_VERSION_FULL \
#       -t $CI_REGISTRY_IMAGE:${OS_PLATFORM}-$(eval echo ${FLAX_VERSION//_/.}) \
#       -t $CI_REGISTRY_IMAGE:${OS_PLATFORM}-latest \
#       --build-arg OS=$OS \
#       --build-arg ENGINE_URL=$ENGINE_URL \
#       --build-arg OS_PLATFORM_URL=$OS_PLATFORM_URL .
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker push $CI_REGISTRY_IMAGE --all-tags
#   parallel:
#     matrix:
#       - OS_PLATFORM: [
#             # linux_amd64,
#             windows_amd64,
#             # android_arm64,
#             # xboxone,
#             # windows_store,
#           ]
